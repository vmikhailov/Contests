using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;

namespace Codewars.Codewars
{
    public static class SquareSums
    {
        public static int[] Decompose(int n, int median = 0)
        {
            if (n == 1) return null;
            var level = 25;
            var start = n >= level ? starts[n - 25] : 0;
            median = median == 0 ? (n >= level ? medians[n - 25] : 0) : median;

            var mq = (int)Math.Sqrt(n + n - 1);
            var squares = Enumerable.Range(2, mq - 1).Select(x => x * x).OrderBy(x => x).ToHashSet();
            var graph = Enumerable.Range(0, n + 1)
                                  .Select(
                                      x => x == 0
                                          ? null
                                          : squares.Select(y => y - x)
                                                   .Where(y => y > 0 && y <= n && x != y)
                                                   .OrderBy(y => Math.Abs(median - y))
                                                   .ToArray())
                                  .ToArray();

            var result = new List<int>();

            if (Impl(start, graph, ref result))
            {
                return result.AsEnumerable().Reverse().ToArray();
            }

            return null;
        }

        private static bool Impl(int start, int[][] graph, ref List<int> result)
        {
            var n = graph.Length - 1;
            var used = new bool[graph.Length];
            var count = graph.Select(x => x?.Length ?? 0).ToArray();

            void Process(int p, int d)
            {
                count[p] += d;
                for (var i = 0; i < graph[p].Length; i++)
                {
                    var v = graph[p][i];
                    if (!used[v]) count[v] += d;
                }
            }

            bool CheckLeaves(int p)
            {
                var leaves = 0;
                for (var i = 0; i < graph[p].Length; i++)
                {
                    var v = graph[p][i];
                    if (!used[v] && count[v] == 2)
                    {
                        if (leaves > 0) return false;
                        leaves = 1;
                    }
                }

                return true;
            }

            IEnumerable<int> GetVertices(int p)
            {
                return p == 0
                    ? graph.Select((x, i) => (x, i))
                           .Where(x => x.x != null)
                           .OrderBy(x => x.x.Count())
                           .ThenBy(x => x.i)
                           .Select(x => x.i)
                           .ToArray()
                    : graph[p];
            }

            start = start != 0 ? GetVertices(0).Skip(start).First() : 0;
            var stack = new Stack<(IEnumerator<int> enumerator, int v, int p)>(n);
            var vertices = (start != 0 ? GetVertices(0).Prepend(start).Distinct() : GetVertices(0)).GetEnumerator();
            var prev = 0;

            while (true)
            {
                var current = 0;
                if (vertices.MoveNext())
                {
                    current = vertices.Current;

                    if (used[current] || !CheckLeaves(current)) continue;

                    used[current] = true;
                    stack.Push((vertices, current, prev));
                    prev = current;

                    if (--n == 0) break;
                    
                    vertices = GetVertices(current).GetEnumerator();
                    Process(prev, -1);
                }
                else
                {
                    if (stack.Count == 0) return false;

                    n++;
                    (vertices, current, prev) = stack.Pop();
                    used[current] = false;

                    if (prev > 0) Process(prev, +1);
                }
            }

            TestContext.WriteLine();
            result = stack.Select(x => x.v).ToList();

            return true;
        }

        private static int[] starts = new[]
        {
            0, 0, 0, 0, 0, 0, 7, 6, 0, 11, 5, 0, 11, 3, 0, 9, 0, 1, 13, 11, 24, 0, 0, 0, 0, 13, 23, 28, 0, 1, 6, 26, 14, 45, 24, 41, 0, 2, 2, 9, 0, 7,
            0, 1, 48, 36, 7, 4, 7, 3, 1, 1, 5, 15, 3, 0, 0, 36, 46, 9, 16, 64, 2, 11, 17, 0, 4, 4, 23, 1, 1, 1, 5, 7, 3, 2, 0, 2, 2, 5, 0, 0, 16, 5,
            2, 19, 5, 14, 7, 0, 2, 8, 4, 0, 1, 0, 4, 2, 4, 4, 6, 16, 2, 1, 1, 2, 0, 4, 0, 6, 1, 2, 1, 0, 0, 4, 16, 4, 1, 1, 1, 1, 2, 1, 1, 1, 3, 1, 1,
            5, 2, 1, 0, 2, 1, 0, 1, 6, 10, 3, 3, 6, 0, 1, 0, 0, 2, 11, 12, 0, 0, 0, 6, 0, 0, 1, 4, 11, 2, 1, 1, 1, 0, 3, 2, 1, 3, 1, 0, 0, 1, 0, 5, 5,
            0, 0, 0, 4, 2, 2, 7, 0, 1, 6, 10, 7, 1, 1, 11, 2, 0, 7, 1, 3, 3, 0, 4, 0, 5, 0, 0, 2, 0, 3, 0, 1, 0, 1, 2, 1, 0, 1, 2, 0, 1, 2, 0, 5, 1,
            2, 1, 0, 0, 2, 2, 2, 2, 1, 0, 0, 0, 0, 4, 2, 0, 0, 0, 2, 0, 0, 1, 1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 1, 0, 1, 1, 0, 2, 1, 2,
            1, 0, 0, 0, 1, 2, 2, 3, 0, 1, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 2, 2, 0, 0, 2, 0, 0, 2, 2, 0, 0, 2, 2, 0, 0, 1, 0, 0, 3, 1, 1, 0, 0, 0,
            0, 0, 1, 0, 0, 0, 1, 5, 4, 1, 0, 2, 0, 0, 1, 0, 0, 1, 0, 3, 0, 0, 0, 1, 1, 0, 2, 1, 0, 0, 0, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 0,
            0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0,
            0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
            1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 2, 0, 2, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        };

        private static int[] medians = new[]
        {
            14, 15, 16, 19, 20, 25, 21, 25, 26, 17, 27, 23, 30, 31, 30, 33, 31, 30, 24, 23, 32, 11, 11, 34, 34, 42, 43, 42, 42, 42, 38, 39, 49, 51,
            46, 41, 48, 42, 42, 42, 56, 56, 57, 57, 53, 48, 52, 59, 50, 49, 60, 54, 51, 69, 67, 51, 42, 58, 71, 60, 62, 72, 51, 54, 54, 50, 53, 54,
            54, 71, 79, 79, 72, 72, 69, 71, 88, 76, 75, 76, 89, 93, 80, 91, 75, 84, 84, 82, 100, 98, 102, 77, 77, 70, 87, 75, 91, 87, 95, 75, 96, 91,
            89, 99, 115, 96, 110, 101, 91, 92, 91, 102, 122, 87, 87, 107, 111, 89, 94, 127, 94, 126, 94, 101, 108, 117, 134, 113, 109, 121, 119, 141,
            108, 137, 111, 116, 128, 146, 120, 111, 139, 124, 132, 135, 128, 119, 120, 133, 140, 132, 132, 132, 138, 118, 137, 134, 148, 131, 142,
            138, 138, 164, 120, 150, 144, 130, 125, 149, 124, 136, 155, 155, 132, 133, 157, 154, 134, 136, 157, 163, 125, 167, 187, 166, 142, 126,
            162, 147, 195, 152, 148, 149, 143, 181, 148, 153, 181, 158, 181, 136, 177, 143, 155, 198, 155, 176, 178, 163, 165, 166, 191, 179, 169,
            199, 173, 184, 167, 163, 172, 199, 184, 203, 175, 208, 163, 183, 163, 162, 195, 164, 177, 203, 201, 187, 184, 213, 214, 197, 191, 211,
            244, 170, 205, 180, 222, 198, 161, 207, 212, 217, 220, 235, 217, 228, 199, 215, 233, 221, 227, 215, 178, 204, 205, 196, 266, 202, 200,
            190, 201, 212, 214, 207, 225, 197, 180, 214, 221, 197, 201, 251, 213, 215, 207, 235, 252, 209, 252, 212, 213, 197, 257, 217, 269, 244,
            276, 258, 190, 194, 244, 230, 250, 274, 228, 262, 248, 248, 225, 218, 267, 239, 247, 269, 245, 255, 274, 227, 315, 316, 202, 288, 218,
            217, 238, 206, 284, 289, 232, 268, 279, 285, 254, 298, 233, 281, 232, 282, 288, 248, 280, 296, 275, 253, 279, 255, 262, 280, 242, 309,
            322, 303, 247, 271, 286, 275, 275, 263, 243, 326, 321, 358, 250, 326, 308, 300, 280, 260, 253, 246, 245, 323, 256, 270, 281, 255, 304,
            274, 339, 303, 281, 253, 318, 320, 283, 261, 289, 338, 284, 290, 286, 345, 289, 296, 271, 303, 283, 283, 356, 260, 267, 327, 282, 266,
            341, 322, 301, 302, 316, 254, 359, 267, 273, 341, 372, 372, 378, 356, 367, 374, 281, 298, 338, 339, 349, 295, 387, 285, 281, 322, 313,
            322, 290, 377, 321, 340, 286, 340, 355, 368, 327, 319, 412, 437, 340, 332, 364, 316, 313, 299, 414, 275, 417, 279, 288, 391, 369, 290,
            419, 375, 299, 382, 314, 385, 380, 288, 376, 352, 301, 357, 341, 345, 353, 410, 311, 334, 422, 422, 399, 400, 404, 327, 370, 399, 442,
            388, 341, 423, 327, 327, 324, 379, 422, 332, 353, 363, 406, 357, 385, 404, 390, 421, 378, 389, 392, 381, 499, 427, 348, 362, 311, 401,
            331, 343, 454, 346, 387, 450, 334, 386, 346, 445, 441, 428, 437, 451, 374, 406, 411, 432, 318, 483, 473, 383, 493, 423, 357, 342, 361,
            393, 484, 403, 346, 364, 396, 395, 490, 506, 391, 497, 485, 376, 382, 392, 506, 353, 398, 384, 353, 384, 407, 549, 465, 511, 433, 398,
            388, 367, 530, 515, 374, 403, 458, 361, 443, 457, 458, 454, 433, 372, 368, 449, 391, 463, 525, 406, 499, 541, 529, 431, 503, 410, 453,
            545, 449, 423, 492, 387, 544, 430, 551, 410, 481, 435, 500, 396, 496, 546, 524, 490, 599, 536, 491, 425, 479, 460, 457, 457, 439, 522,
            545, 506, 504, 519, 558, 546, 389, 524, 439, 531, 470, 469, 492, 521, 559, 532, 482, 489, 445, 536, 443, 459, 469, 417, 503, 405, 422,
            588, 439, 470, 574, 532, 600, 440, 516, 473, 516, 523, 490, 585, 446, 445, 546, 506, 456, 520, 596, 512, 568, 599, 440, 512, 477, 540,
            588, 604, 529, 588, 432, 579, 618, 560, 464, 631, 586, 573, 441, 509, 478, 625, 523, 462, 513, 513, 600, 542, 468, 434, 522, 610, 467,
            608, 603, 460, 592, 444, 451, 570, 558, 641, 619, 434, 609, 453, 519, 631, 433, 683, 584, 668, 510, 488, 486, 536, 627, 612, 534, 457,
            537, 504, 596, 504, 625, 640, 478, 533, 530, 534, 674, 488, 612, 511, 678, 654, 584, 456, 640, 583, 619, 496, 683, 506, 527, 497, 465,
            669, 548, 699, 646, 630, 648, 549, 591, 563, 581, 540, 573, 634, 477, 470, 483, 492, 555, 601, 714, 485, 552, 649, 634, 721, 705, 638,
            522, 690, 467, 695, 575, 627, 535, 614, 707, 714, 614, 619, 710, 681, 474, 609, 645, 680, 595, 474, 506, 617, 626, 619, 678, 560, 644,
            647, 619, 587, 676, 651, 595, 672, 511, 589, 711, 519, 614, 648, 626, 750, 501, 764, 537, 584, 671, 526, 671, 502, 758, 627, 733, 755,
            514, 498, 540, 523, 548, 605, 544, 535, 587, 520, 771, 691, 638, 777, 641, 552, 656, 684, 641, 659, 712, 589, 629, 746, 697, 709, 737,
            648, 669, 683, 727, 733, 655, 643, 530, 790, 586, 677, 709, 674, 505, 754, 758, 771, 509, 536, 663, 727, 822, 612, 698, 680, 581, 737,
            734, 819, 617, 683, 672, 708, 703, 666, 772, 802, 554, 677, 742, 622, 712, 626, 708, 821, 744, 623, 575, 620, 708, 648, 718, 770, 869,
            566, 629, 623, 781, 632, 633, 625, 576, 606, 659, 584, 749, 611, 858, 860, 659, 603, 845, 806, 535, 919, 606, 651, 870, 621, 795, 583,
            810, 780, 763, 788, 607, 882, 714, 827, 656, 657, 653, 622, 816, 836, 811, 556, 696, 749, 701, 626, 577, 803, 737, 605, 598, 685, 655,
            738, 803, 850, 569, 815, 782, 878, 664, 839, 771, 838, 716, 914, 854, 821, 720, 669, 596, 856, 881, 879, 734, 817, 823, 902, 576, 877,
            851, 887, 917, 651, 618, 762, 689, 650, 595, 761, 899, 799, 796, 935, 835, 621, 859, 804, 932, 806, 824, 919, 644, 953, 741, 877, 726,
            662, 676, 746, 656, 688, 647, 650, 690, 674, 810, 623, 624, 623, 670, 664, 616, 752, 834, 954, 891, 796, 934, 644, 609, 687, 933, 733,
            866, 819, 648, 969, 755, 646, 909, 631, 875, 900, 752, 815, 695, 694, 783, 891, 760, 926, 915, 905, 906, 930, 906, 897, 745, 944, 1000,
            876, 646, 757, 790, 868, 703, 676, 627, 646, 720, 813, 991, 712, 865, 677, 915, 766, 811, 884, 697, 965, 649, 738, 834, 1016, 868, 827,
            812, 640, 1083, 963, 705, 685, 781, 688, 732, 874, 742, 990, 798, 899, 800, 730, 674, 727, 996, 900, 845, 999, 739, 714, 817, 779, 722,
            855, 776, 680, 954, 864, 675, 1062, 731, 736, 1117, 924, 790, 732, 1002, 983, 709, 751, 755, 883, 703, 723, 752, 959, 1073, 797, 749, 670,
            720, 994, 816, 1027, 937, 857, 1015, 860, 997, 964, 809, 801, 991, 993, 917, 956, 793, 703, 715, 749, 707, 981, 974, 1039, 952, 990, 1101,
            752, 935, 1106, 1058, 890, 1114, 701, 966, 794, 1042, 935, 723, 735, 1096, 1052, 1052, 1002, 888, 1130, 996, 1120, 1134, 782, 982, 851,
            1062, 1077, 760, 1013, 972, 1053, 859, 918, 809, 716, 772, 892, 1042, 1116, 941, 1086, 1069, 879, 854, 874, 783, 977, 937, 1075, 836, 878,
            1056, 858, 752, 877, 730, 834, 968, 1085, 1089, 766, 946, 970, 1081, 1144, 985, 754, 989, 775, 732, 1123, 953, 949, 1015, 784, 1053, 955,
            1002, 893, 849, 770, 972, 1023, 844, 910, 933, 772, 1108, 1018, 1148, 1097, 875, 757, 1029, 864, 800, 1209, 873, 805, 828, 897, 863, 1110,
            1192, 969, 1002, 845, 1103, 1131, 1051, 853, 1046, 1085, 929, 909, 1141, 919, 767, 768, 754, 786, 893, 783, 1184, 782, 837, 1012, 834,
            843, 852, 852, 777, 916, 1037, 1225, 1214, 1078, 964, 964, 1106, 1020, 843, 918, 1126, 994, 1006, 802, 870, 897, 789, 967, 833, 887, 1158,
            1023, 805, 892, 951, 1016, 1261, 1243, 856, 923, 815, 1146, 1124, 834, 1111, 892, 862, 973, 800, 842, 827, 814, 802, 1281, 1167, 1009,
            1003, 945, 854, 1120, 1157, 850, 1060, 819, 1121, 848, 881, 1189, 1155, 877, 862, 846, 1028, 877, 949, 1088, 952, 860, 1248, 1194, 824,
            1133, 1172, 1160, 878, 840, 852, 953, 835, 948, 861, 1219, 929, 1230, 1095, 1107, 989, 793, 1089, 1166, 1250, 822, 877, 903, 1199, 973,
            1160, 1052, 1273, 1079, 870, 841, 858, 948, 906, 1277, 1230, 1334, 915, 857, 1288, 1310, 1171, 1025, 929, 1039, 844, 1109, 1071, 1346,
            1303, 1205, 1320, 999, 1081, 914, 839, 904, 825, 987, 834, 1340, 858, 902, 871, 873, 885, 1281, 1080, 1133, 984, 843, 1357, 1110, 1374,
            1090, 1314, 986, 914, 1076, 1253, 1193, 1251, 1323, 938, 1253, 1119, 917,
        };
    }
}