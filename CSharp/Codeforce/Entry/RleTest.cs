using System;
using NUnit.Framework;

namespace Codewars.Entry
{
    [TestFixture]
    public class RleTest
    {
         private int[] codes = new[]
        {
            1, 1, 1, 1, 1, 1, 8, 7, 1, 12, 6, 1, 12, 4, 1, 10, 1, 2, 14, 12, 25, 1, 1, 1, 1, 14, 24, 29, 1, 2, 7, 27, 15, 46, 25, 42, 1, 3, 3, 10, 1,
            8, 1, 2, 49, 37, 8, 5, 8, 4, 2, 2, 6, 16, 4, 1, 1, 37, 47, 10, 17, 65, 3, 12, 18, 1, 5, 5, 24, 2, 2, 2, 6, 8, 4, 3, 1, 3, 3, 6, 1, 1, 17,
            6, 3, 20, 6, 15, 8, 1, 3, 9, 5, 1, 2, 1, 5, 3, 5, 5, 7, 17, 3, 2, 2, 3, 1, 5, 1, 7, 2, 3, 2, 1, 1, 5, 17, 5, 2, 2, 2, 2, 3, 2, 2, 2, 4, 2,
            2, 6, 3, 2, 1, 3, 2, 1, 2, 7, 11, 4, 4, 7, 1, 2, 1, 1, 3, 12, 13, 1, 1, 1, 7, 1, 1, 2, 5, 12, 3, 2, 2, 2, 1, 4, 3, 2, 4, 2, 1, 1, 2, 1, 6,
            6, 1, 1, 1, 5, 3, 3, 8, 1, 2, 7, 11, 8, 2, 2, 12, 3, 1, 8, 2, 4, 4, 1, 5, 1, 6, 1, 1, 3, 1, 4, 1, 2, 1, 2, 3, 2, 1, 2, 3, 1, 2, 3, 1, 6,
            2, 3, 2, 1, 1, 3, 3, 3, 3, 2, 1, 1, 1, 1, 5, 3, 1, 1, 1, 3, 1, 1, 2, 2, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2, 1, 2, 1, 2, 2, 1, 3, 2,
            3, 2, 1, 1, 1, 2, 3, 3, 4, 1, 2, 1, 1, 1, 2, 1, 1, 2, 2, 1, 1, 2, 1, 3, 3, 1, 1, 3, 1, 1, 3, 3, 1, 1, 3, 3, 1, 1, 2, 1, 1, 4, 2, 2, 1, 1,
            1, 1, 1, 2, 1, 1, 1, 2, 6, 5, 2, 1, 3, 1, 1, 2, 1, 1, 2, 1, 4, 1, 1, 1, 2, 2, 1, 3, 2, 1, 1, 1, 4, 2, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 3, 1,
            1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 2,
            1, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 3, 2, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
            1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1, 1, 1, 1, 3, 1, 3, 1, 1, 1, 2, 1, 2, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 2, 1, 2, 2, 1, 1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 3, 1, 1, 2, 1, 1, 1, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1
        };

         [Test]
         public void Test0()
         {
             var v = Rle.Compress(codes);
         }
         
        [Test]
        public void Test1()
        {
            var m = new[] { 1 };
            var e = new[] { 1, 1 };
            Assert.AreEqual(e, Rle.Compress(m));
        }
        
        [Test]
        public void Test2()
        {
            var m = new[] { 1, 2, 2, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5 };
            var e = new[] { 1, 1, 2, 2, 3, 2, 4, 3, 5, 8 };
            Assert.AreEqual(e, Rle.Compress(m));
        }

        [TestCase(100, 0, 10, 100)]
        [TestCase(10_000, 0, 10, 100)]
        [TestCase(10_000_000, 0, 2, 100)]
        [TestCase(1_000_000_00, 0, 2, 100)]
        public void TestPerf(int n, int min, int max, int rep)
        {
            var r = new Random();
            var m = new int[n];
            for (var i = 0; i < n;)
            {
                var k = r.Next(rep);
                k = i + k >= n ? n - i: k;
                var v = r.Next(max - min) + min;
                Array.Fill(m, v, i, k);
                i += k;
            }

            var a = Rle.Compress(m);
            TestContext.WriteLine($"n = {n}, a = {a.Length}");
        }
    }
}